---
layout: post
title:  "PHP中各种不同"
categories: study class
tags: php
author: 果果
description: God has two children,what's the different between them.
---

PHP中还是有很多微小的不同点的，总结过来方便学习，给自己一个记忆的机会。先从easy的开始，毕竟基本上都知道。

1.POST和GET有什么区别

我的：get是有长度限制，是通过url参数进行传输获取。post是传递的参数实体，没有长度限制。

网答w3cschool：

{% highlight v %}
+-----------------+-----------------------+-----------------------+
|                 |GET                    |POST                   |
+-----------------+-----------------------+-----------------------+
|后退按钮/刷新    |无影响                 |数据会被告知重新提交   |
+-----------------+-----------------------+-----------------------+
|书签             |可收藏为书签           |不可收藏为书签         |
+-----------------+-----------------------+-----------------------+
|缓存             |能被缓存               |不能缓存               |
|历史记录         |参数保存到历史里       |参数不会保存在历史中   |
+-----------------+-----------------------+-----------------------+
|编码方式         |只能进行url编码        |支持多种编码           |
+-----------------+-----------------------+-----------------------+
|对数据长度的限制 |长度是有限制的         |没有长度限制           |
+-----------------+-----------------------+-----------------------+
|对数据类型的限制 |只接受ASCII码数据      |没有限制也允许二级制   |
+-----------------+-----------------------+-----------------------+
|安全性           |数据会显示在url上      |数据保存在Requestbody中|
+-----------------+-----------------------+-----------------------+
这个表格我还是放弃吧
{% endhighlight %}

[节选其他理解](https://www.cnblogs.com/logsharing/p/8448446.html)

+	GET和POST本质没有区别，GET和POST本质上就是TCP链接
+	（大多数）浏览器通常都会限制url长度在2K个字节，而（大多数）服务器最多处理64K大小的url
+	GET产生一个TCP数据包；POST产生两个TCP数据包（除了Firefox）

2.include和require的区别

我的：
+	include报一个warning的错误并继续执行下去，require报一个Fatal的错误，终止程序。
+	include有返回值，require没有返回值。include失败时返回false并发出警告，成功返回1或者包含文件的返回值。

网上：
+	include每次执行都会进行读取和评估，require文件只处理一次（用文件内容替换require）
+	include会有条件包含，require无条件包含
+	require是在编译时就会替换掉自己，执行速度快，适合导入静态，放在开头；include适合导入动态，并且可以循环导入多个文件

3.session和cookie的区别

我的：
+	session存储在服务端，cookie存储在客户端/浏览器
+	cookie可以存储sessiond_id,cookie被用户禁掉时可以通过url参数或者表单提交
+	在安全性上cookie可以从浏览器看到
+	没有设置时间的cookie和浏览器共存保存在内存，设置时间的cookie保存在硬盘，session在服务端可以保存在硬盘也可以保存在memcache等。
+	访问增多时session会增加服务器压力,单个cookie保存的数据不能超过4K，很多浏览器都限制一个站点最多保存20个cookie
+	登陆用cookie，购物车用session

网充：
+	域的支持不一样，cookie可以支持a.com下所有的子域名，www.的session缺不能用在api.下面
+	session可以保存对象，cookie只能保存str形式的，可以用序列化救国

4.单引号和双引号的区别

我的：
+	单引号不可以解析变量，双引号可以解析变量，和转义字符
+	单引号的效率大于双引号	

5.echo，print，print_r区别

我的：
+	echo和print是语言结构，print_r是函数有返回值
+	echo和print只能输出str和数值型，print_r可以打印其他比如数组对象等复合型变量

补充：
+	echo可以连续输出多个变量，而print一次只能输出一个变量
+	print可以将打印的值复制给一个变量，而echo不行，echo比print稍微快一些
+	print总是返回1

如题：echo 3 . print(2) . print(4) . 5 . 'c' =>45c2131

原理：
	第一步：
最初在io存储处存入 字符串 c,接着遇到5,存入io,此时io内容为5c, echo 在碰到print()时候将执行print()，即在把 5 放入io存储后由print(4)将数字4也同样压入io存储中，此时io存储中数据为45c，由于print()为输出函数(官方介绍print实际是语言结构，不是函数)，所以此时会执行一次io输出操作,即输出 45c 到输出界面，清除io存储，io存储内此时数据为''，print()执行完成后返回1,此时界面上已经有了45c,而代码则变成了

>echo 3.print(2).1;

第二步:
同上以此类推，这次会先将1放入io内，接着讲2放入io内，此时io内的内容为21，print执行输出操作，清空io,此时屏幕相等于已经输了了45c21，代码则变为了

>echo 3.1;

第三步:
讲1和3放入io,此时io内容为31，echo 将io内容输出到屏幕，此时最终结果为45c2131

6.memcached和redis的区别

简单的通用区别：（具体学习单独开篇）
+	存储方式，memcached把数据全部存储在内存中，断电会挂掉，数据会丢失，数据不能超过内存大小；redis只会缓存全部key值，当发现内存使用量超过一定的阈值时会触发swap把一部分value永久存储在硬盘中
+	数据的支持，memcached只支持键值对的方式存储数据，redis支持除k/v以外的list，hash，有序无序集合。如果使用简单的k/v，内存利用率mem>redis,用hash做k/v，mem<redis
+	Redis支持数据的备份，即master-slave模式的数据备份；可以在数据丢失时通过AOF恢复

7.innodb和myisam的区别

整理：
+	锁机制，innodb支持行级锁和事务处理和外键，myisam只支持表锁，myisam支持全文索引，压缩和空间函数
+	innodb通过工具支持真正的热备份，支持安全恢复，myisam不支持安全恢复
+	innodb存储在共享表空间可以通过配置分开，myisam表存储在myd数据和myi索引文件
+	innodb主键查询性能高于其他引擎

8.svn与git 的区别

+	git是分布式的，svn是集中式的
+	SVN 断开网络或者断开VPN就无法commit代码，但是Git 可以先commit到本地仓库
+	Git 的内容完整性要优于SVN
+	Git没有一个全局版本号，而SVN有
。。。

