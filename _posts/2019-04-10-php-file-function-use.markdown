---
layout: post
title:  "PHP文件操作常用操作"
categories: preg text 
tags: preg note
author: 果果
description: Fuck the problem and fuck the preg.
---
正则表达式，哎，多么痛的领悟。我本来以为php里面少用一点，有问题去百度，结果还是逃不掉，php,mysql,js,shell,讨厌，罢了，正面迎击干掉他，草。这里作为练习的地方，记录下我战斗的故事。

[30分钟学会正则表达式](https://www.jb51.net/tools/zhengze.html#updatelog)

### 练习场

最简单的：直接写单词比如 hi，就会匹配所有hi，包括him，high等

>元字符：\b \bhi\b => hi,而不会匹配him

>匹配：hi lucy => \bhi\b.*\blucy\b

>简单的匹配台式电话：0\d{2}-\d{8}

>^\w+：匹配一行的第一个单词

>\(?0\d{2}[)-]?\d{8}

>(?<=<(\w+)>).*(?=<\/\1>) 匹配不包含属性的简单HTML标签内里的内容

元字符：

    .   匹配除了换行符\n以外的任意字符
    \w  匹配字母或者数字或者下划线或汉字
    \s  匹配任意空白符\t\n' '
    \d  匹配数字
    \b  匹配单词开始和结束，单词边界，旁边有空格有换行等
    ^   匹配字符串的开始
    $   匹配字符串的结束

反义：

    \W      匹配任意不是字母数字下划线汉字的字符
    \S      匹配任意不是空白符的字符
    \D      匹配任意不是数字的字符
    \B      匹配任意不是单词开头和结尾的位置
    [^X]    匹配不是X以外的任意字符
    [^aeiou]匹配aeiou以外的任意字符

    注：注意区分[^]这个是取反，和^的匹配开始不一样

元字符转义：

    如：.=>\.     *=>\*   \=>\\   C:\window=>C:\\window

重复：

    ?   重复0次或者1次
    *   重复0次或者多次
    +   重复1次或者多次
    {n} 重复n次
    {n,}重复n次，或者更多
    {n,m}重复n-m次

字符区间：

    [aeiou]匹配区间内存在的任意个字符,区分{},\b\b,/ /,^ $
    [0-9]==\d
    [a-z0-9A-Z_]~=\w
    [?.!]匹配标点符号，里面不用转义

分支条件：

    |：或者的意思
    注：分支会从左到右匹配，前面的匹配了，就不会管后面的了，所以长的放左边，短的放右边

分组：

    (\d{1,3]}.){3}(\d{1,3}) -简单的IP匹配，用小括号分组方便对字符串重复
    ((2[0-4]\d|25[0-5]|[01]?\d\d?)\.){3}(2[0-4]\d|25[0-5]|[01]?\d\d?) -IP匹配

后向引用：

和分组有关，每个分组也叫子表达式。每个分组都有一个组号。从左到右从1开始。后向引用可以重复收缩前面某个分组匹配的文本。

>\b(\w+)\b\s+\1\b    -匹配go go这类的

也可以指定组名,用\k<word>代替\1
>(?<word>\w+)或者(?'word'\w+) 复写上面的例子\b(?<word>\w+)\b\s+\k<word>\b

不捕获文本
>(?:exp)匹配不捕获，不分组

零宽断言：

目的是查找符合条件的之前或者之后的位置，像是\b,^,$那样，条件既是断言。

>(?=exp)叫做零宽度正预测先行断言，我日啊，断言自身出现的位置的后面能匹配表达式exp。比如\b\w+(?=ing\b)，查找I'm singing while you're dancing，会匹配sing和danc

>(?<=exp)也叫零宽度正回顾后发断言,断言自身出现的位置的前面能匹配表达式exp.如(?<=\bre)\w+\b，查找reading a book时，会匹配ading

负向零宽断言：

>(?!exp)零宽度负预测先行断言，断言此位置的后面不能匹配表达式exp。
\d{3}(?!\d)匹配三位数字，而且这三位数字的后面不能是数字；\b((?!abc)\w)+\b匹配不包含连续字符串abc的单词。

>(?<!exp),零宽度负回顾后发断言,断言此位置的前面不能匹配表达式exp:(?<![a-z])\d{7}匹配前面不是小写字母的七位数字

注释：

通过语法(?#comment)来包含注释，例如：2[0-4]\d(?#200-249)|25[0-5](?#250-255)|[01]?\d\d?(?#0-199)

    “忽略模式里的空白符”选项
    (?<=    # 断言要匹配的文本的前缀
    <(\w+)> # 查找尖括号括起来的字母或数字(即HTML/XML标签)
    )       # 前缀结束
    .*      # 匹配任意文本
    (?=     # 断言要匹配的文本的后缀
    <\/\1>  # 查找尖括号括起来的内容：前面是一个"/"，后面是先前捕获的标签
    )       # 后缀结束

懒惰与贪婪

贪婪：正则表达式中包含能接受重复的限定符时，通常的行为是（在使整个表达式能得到匹配的前提下）匹配尽可能多的字符<br/>
懒惰：尽可能少的匹配字符

    表5.懒惰限定符
    代码/语法   说明
    *?          重复任意次，但尽可能少重复
    +?          重复1次或更多次，但尽可能少重复
    ??          重复0次或1次，但尽可能少重复
    {n,m}?      重复n到m次，但尽可能少重复
    {n,}?       重复n次以上，但尽可能少重复
    
懒惰限定符的语法有点像是在重复元字符后面加？

### 日积月累

    一、校验数字的表达式 

    1. 数字：^[0-9]*$

    2. n位的数字：^\d{n}$

    3. 至少n位的数字：^\d{n,}$

    4. m-n位的数字：^\d{m,n}$

    5. 零和非零开头的数字：^(0|[1-9][0-9]*)$

    6. 非零开头的最多带两位小数的数字：^([1-9][0-9]*)+(.[0-9]{1,2})?$

    7. 带1-2位小数的正数或负数：^(\-)?\d+(\.\d{1,2})?$

    8. 正数、负数、和小数：^(\-|\+)?\d+(\.\d+)?$

    9. 有两位小数的正实数：^[0-9]+(.[0-9]{2})?$

    10. 有1~3位小数的正实数：^[0-9]+(.[0-9]{1,3})?$

    11. 非零的正整数：^[1-9]\d*$ 或 ^([1-9][0-9]*){1,3}$ 或 ^\+?[1-9][0-9]*$

    12. 非零的负整数：^\-[1-9][]0-9"*$ 或 ^-[1-9]\d*$

    13. 非负整数：^\d+$ 或 ^[1-9]\d*|0$

    14. 非正整数：^-[1-9]\d*|0$ 或 ^((-\d+)|(0+))$

    15. 非负浮点数：^\d+(\.\d+)?$ 或 ^[1-9]\d*\.\d*|0\.\d*[1-9]\d*|0?\.0+|0$

    16. 非正浮点数：^((-\d+(\.\d+)?)|(0+(\.0+)?))$ 或 ^(-([1-9]\d*\.\d*|0\.\d*[1-9]\d*))|0?\.0+|0$

    17. 正浮点数：^[1-9]\d*\.\d*|0\.\d*[1-9]\d*$ 或 ^(([0-9]+\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\.[0-9]+)|([0-9]*[1-9][0-9]*))$

    18. 负浮点数：^-([1-9]\d*\.\d*|0\.\d*[1-9]\d*)$ 或 ^(-(([0-9]+\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\.[0-9]+)|([0-9]*[1-9][0-9]*)))$

    19. 浮点数：^(-?\d+)(\.\d+)?$ 或 ^-?([1-9]\d*\.\d*|0\.\d*[1-9]\d*|0?\.0+|0)$   
     

    二、校验字符的表达式     

    1. 汉字：^[\u4e00-\u9fa5]{0,}$

    2. 英文和数字：^[A-Za-z0-9]+$ 或 ^[A-Za-z0-9]{4,40}$

    3. 长度为3-20的所有字符：^.{3,20}$

    4. 由26个英文字母组成的字符串：^[A-Za-z]+$

    5. 由26个大写英文字母组成的字符串：^[A-Z]+$

    6. 由26个小写英文字母组成的字符串：^[a-z]+$

    7. 由数字和26个英文字母组成的字符串：^[A-Za-z0-9]+$

    8. 由数字、26个英文字母或者下划线组成的字符串：^\w+$ 或 ^\w{3,20}$

    9. 中文、英文、数字包括下划线：^[\u4E00-\u9FA5A-Za-z0-9_]+$     

    10. 中文、英文、数字但不包括下划线等符号：^[\u4E00-\u9FA5A-Za-z0-9]+$ 或 ^[\u4E00-\u9FA5A-Za-z0-9]{2,20}$     

    11. 可以输入含有^%&',;=?$\"等字符：[^%&',;=?$\x22]+ 12 禁止输入含有~的字符：[^~\x22]+ 
     

    三、特殊需求表达式     

    1. Email地址：^\w+([-+.]\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*$

    2. 域名：[a-zA-Z0-9][-a-zA-Z0-9]{0,62}(/.[a-zA-Z0-9][-a-zA-Z0-9]{0,62})+/.?

    3. InternetURL：[a-zA-z]+://[^\s]* 或 ^http://([\w-]+\.)+[\w-]+(/[\w-./?%&=]*)?$

    4. 手机号码：^(13[0-9]|14[5|7]|15[0|1|2|3|5|6|7|8|9]|18[0|1|2|3|5|6|7|8|9])\d{8}$

    5. 电话号码("XXX-XXXXXXX"、"XXXX-XXXXXXXX"、"XXX-XXXXXXX"、"XXX-XXXXXXXX"、"XXXXXXX"和"XXXXXXXX)：^(\(\d{3,4}-)|\d{3.4}-)?\d{7,8}$

    6. 国内电话号码(0511-4405222、021-87888822)：\d{3}-\d{8}|\d{4}-\d{7}

    7. 身份证号(15位、18位数字)：^\d{15}|\d{18}$     

    8. 短身份证号码(数字、字母x结尾)：^([0-9]){7,18}(x|X)?$ 或 ^\d{8,18}|[0-9x]{8,18}|[0-9X]{8,18}?$     

    9. 帐号是否合法(字母开头，允许5-16字节，允许字母数字下划线)：^[a-zA-Z][a-zA-Z0-9_]{4,15}$     

    10. 密码(以字母开头，长度在6~18之间，只能包含字母、数字和下划线)：^[a-zA-Z]\w{5,17}$

    11. 强密码(必须包含大小写字母和数字的组合，不能使用特殊字符，长度在8-10之间)：^(?=.*\d)(?=.*[a-z])(?=.*[A-Z]).{8,10}$     

    12. 日期格式：^\d{4}-\d{1,2}-\d{1,2}

    13. 一年的12个月(01～09和1～12)：^(0?[1-9]|1[0-2])$

    14. 一个月的31天(01～09和1～31)：^((0?[1-9])|((1|2)[0-9])|30|31)$

    15. 钱的输入格式：     

        16. 1.有四种钱的表示形式我们可以接受:"10000.00" 和 "10,000.00", 和没有 "分" 的 "10000" 和 "10,000"：^[1-9][0-9]*$     

        17. 2.这表示任意一个不以0开头的数字,但是,这也意味着一个字符"0"不通过,所以我们采用下面的形式：^(0|[1-9][0-9]*)$     

        18. 3.一个0或者一个不以0开头的数字.我们还可以允许开头有一个负号：^(0|-?[1-9][0-9]*)$     

        19. 4.这表示一个0或者一个可能为负的开头不为0的数字.让用户以0开头好了.把负号的也去掉,因为钱总不能是负的吧.下面我们要加的是说明可能的小数部分：^[0-9]+(.[0-9]+)?$     

        20. 5.必须说明的是,小数点后面至少应该有1位数,所以"10."是不通过的,但是 "10" 和 "10.2" 是通过的：^[0-9]+(.[0-9]{2})?$     

        21. 6.这样我们规定小数点后面必须有两位,如果你认为太苛刻了,可以这样：^[0-9]+(.[0-9]{1,2})?$     

        22. 7.这样就允许用户只写一位小数.下面我们该考虑数字中的逗号了,我们可以这样：^[0-9]{1,3}(,[0-9]{3})*(.[0-9]{1,2})?$     

        23. 8.1到3个数字,后面跟着任意个 逗号+3个数字,逗号成为可选,而不是必须：^([0-9]+|[0-9]{1,3}(,[0-9]{3})*)(.[0-9]{1,2})?$     

    24. 备注：这就是最终结果了,别忘了"+"可以用"*"替代如果你觉得空字符串也可以接受的话(奇怪,为什么?)最后,别忘了在用函数时去掉去掉那个反斜杠,一般的错误都在这里     

    25. xml文件：^([a-zA-Z]+-?)+[a-zA-Z0-9]+\\.[x|X][m|M][l|L]$

    26. 中文字符的正则表达式：[\u4e00-\u9fa5]     

    27. 双字节字符：[^\x00-\xff] (包括汉字在内，可以用来计算字符串的长度(一个双字节字符长度计2，ASCII字符计1))     

    28. 空白行的正则表达式：\n\s*\r (可以用来删除空白行)     

    29. HTML标记的正则表达式：<(\S*?)[^>]*>.*?</\1>|<.*? /> (网上流传的版本太糟糕，上面这个也仅仅能部分，对于复杂的嵌套标记依旧无能为力)     

    30. 首尾空白字符的正则表达式：^\s*|\s*$或(^\s*)|(\s*$) (可以用来删除行首行尾的空白字符(包括空格、制表符、换页符等等)，非常有用的表达式     

    31. 腾讯QQ号：[1-9][0-9]{4,} (腾讯QQ号从10000开始)

    32. 中国邮政编码：[1-9]\d{5}(?!\d) (中国邮政编码为6位数字)

    33. IP地址：\d+\.\d+\.\d+\.\d+ (提取IP地址时有用)

    34. IP地址：((?:(?:25[0-5]|2[0-4]\\d|[01]?\\d?\\d)\\.){3}(?:25[0-5]|2[0-4]\\d|[01]?\\d?\\d))